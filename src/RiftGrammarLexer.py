# Generated from Grit.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,29,187,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,
        1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,3,4,88,8,4,1,5,1,5,5,5,92,8,5,10,5,12,5,95,9,5,1,6,4,
        6,98,8,6,11,6,12,6,99,1,6,1,6,5,6,104,8,6,10,6,12,6,107,9,6,3,6,
        109,8,6,1,7,1,7,5,7,113,8,7,10,7,12,7,116,9,7,1,7,1,7,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,3,8,128,8,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,
        1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,
        1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,
        1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,4,26,171,8,26,11,26,12,26,
        172,1,26,1,26,1,27,1,27,5,27,179,8,27,10,27,12,27,182,9,27,1,27,
        1,27,1,28,1,28,1,180,0,29,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,1,0,5,3,
        0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,
        34,34,94,94,2,0,9,9,32,32,195,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
        0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
        0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
        0,57,1,0,0,0,1,59,1,0,0,0,3,62,1,0,0,0,5,67,1,0,0,0,7,72,1,0,0,0,
        9,87,1,0,0,0,11,89,1,0,0,0,13,97,1,0,0,0,15,110,1,0,0,0,17,127,1,
        0,0,0,19,129,1,0,0,0,21,132,1,0,0,0,23,134,1,0,0,0,25,137,1,0,0,
        0,27,140,1,0,0,0,29,142,1,0,0,0,31,144,1,0,0,0,33,146,1,0,0,0,35,
        148,1,0,0,0,37,150,1,0,0,0,39,152,1,0,0,0,41,154,1,0,0,0,43,156,
        1,0,0,0,45,159,1,0,0,0,47,162,1,0,0,0,49,165,1,0,0,0,51,167,1,0,
        0,0,53,170,1,0,0,0,55,176,1,0,0,0,57,185,1,0,0,0,59,60,5,105,0,0,
        60,61,5,102,0,0,61,2,1,0,0,0,62,63,5,101,0,0,63,64,5,108,0,0,64,
        65,5,105,0,0,65,66,5,102,0,0,66,4,1,0,0,0,67,68,5,101,0,0,68,69,
        5,108,0,0,69,70,5,115,0,0,70,71,5,101,0,0,71,6,1,0,0,0,72,73,5,119,
        0,0,73,74,5,104,0,0,74,75,5,105,0,0,75,76,5,108,0,0,76,77,5,101,
        0,0,77,8,1,0,0,0,78,79,5,84,0,0,79,80,5,114,0,0,80,81,5,117,0,0,
        81,88,5,101,0,0,82,83,5,70,0,0,83,84,5,97,0,0,84,85,5,108,0,0,85,
        86,5,115,0,0,86,88,5,101,0,0,87,78,1,0,0,0,87,82,1,0,0,0,88,10,1,
        0,0,0,89,93,7,0,0,0,90,92,7,1,0,0,91,90,1,0,0,0,92,95,1,0,0,0,93,
        91,1,0,0,0,93,94,1,0,0,0,94,12,1,0,0,0,95,93,1,0,0,0,96,98,7,2,0,
        0,97,96,1,0,0,0,98,99,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,108,
        1,0,0,0,101,105,5,46,0,0,102,104,7,2,0,0,103,102,1,0,0,0,104,107,
        1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,109,1,0,0,0,107,105,
        1,0,0,0,108,101,1,0,0,0,108,109,1,0,0,0,109,14,1,0,0,0,110,114,5,
        34,0,0,111,113,7,3,0,0,112,111,1,0,0,0,113,116,1,0,0,0,114,112,1,
        0,0,0,114,115,1,0,0,0,115,117,1,0,0,0,116,114,1,0,0,0,117,118,5,
        34,0,0,118,16,1,0,0,0,119,120,5,78,0,0,120,121,5,111,0,0,121,122,
        5,110,0,0,122,128,5,101,0,0,123,124,5,110,0,0,124,125,5,117,0,0,
        125,126,5,108,0,0,126,128,5,108,0,0,127,119,1,0,0,0,127,123,1,0,
        0,0,128,18,1,0,0,0,129,130,5,61,0,0,130,131,5,61,0,0,131,20,1,0,
        0,0,132,133,5,61,0,0,133,22,1,0,0,0,134,135,5,43,0,0,135,136,5,61,
        0,0,136,24,1,0,0,0,137,138,5,45,0,0,138,139,5,61,0,0,139,26,1,0,
        0,0,140,141,5,43,0,0,141,28,1,0,0,0,142,143,5,45,0,0,143,30,1,0,
        0,0,144,145,5,42,0,0,145,32,1,0,0,0,146,147,5,47,0,0,147,34,1,0,
        0,0,148,149,5,40,0,0,149,36,1,0,0,0,150,151,5,41,0,0,151,38,1,0,
        0,0,152,153,5,60,0,0,153,40,1,0,0,0,154,155,5,62,0,0,155,42,1,0,
        0,0,156,157,5,60,0,0,157,158,5,61,0,0,158,44,1,0,0,0,159,160,5,62,
        0,0,160,161,5,61,0,0,161,46,1,0,0,0,162,163,5,33,0,0,163,164,5,61,
        0,0,164,48,1,0,0,0,165,166,5,58,0,0,166,50,1,0,0,0,167,168,5,10,
        0,0,168,52,1,0,0,0,169,171,7,4,0,0,170,169,1,0,0,0,171,172,1,0,0,
        0,172,170,1,0,0,0,172,173,1,0,0,0,173,174,1,0,0,0,174,175,6,26,0,
        0,175,54,1,0,0,0,176,180,5,35,0,0,177,179,9,0,0,0,178,177,1,0,0,
        0,179,182,1,0,0,0,180,181,1,0,0,0,180,178,1,0,0,0,181,183,1,0,0,
        0,182,180,1,0,0,0,183,184,6,27,0,0,184,56,1,0,0,0,185,186,9,0,0,
        0,186,58,1,0,0,0,10,0,87,93,99,105,108,114,127,172,180,1,6,0,0
    ]

class GritGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELIF = 2
    ELSE = 3
    WHILE = 4
    BOOL = 5
    IDENTIFIER = 6
    NUMBER = 7
    STRING = 8
    NONE = 9
    EQUALS = 10
    ASSIGN = 11
    PLUS_ASSIGN = 12
    MINUS_ASSIGN = 13
    PLUS = 14
    MINUS = 15
    TIMES = 16
    DIVIDE = 17
    LPAREN = 18
    RPAREN = 19
    LT = 20
    GT = 21
    LE = 22
    GE = 23
    NE = 24
    COLON = 25
    NEWLINE = 26
    WS = 27
    COMMENT = 28
    MISMATCH = 29

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'elif'", "'else'", "'while'", "'=='", "'='", "'+='", 
            "'-='", "'+'", "'-'", "'*'", "'/'", "'('", "')'", "'<'", "'>'", 
            "'<='", "'>='", "'!='", "':'", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELIF", "ELSE", "WHILE", "BOOL", "IDENTIFIER", "NUMBER", 
            "STRING", "NONE", "EQUALS", "ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
            "PLUS", "MINUS", "TIMES", "DIVIDE", "LPAREN", "RPAREN", "LT", 
            "GT", "LE", "GE", "NE", "COLON", "NEWLINE", "WS", "COMMENT", 
            "MISMATCH" ]

    ruleNames = [ "IF", "ELIF", "ELSE", "WHILE", "BOOL", "IDENTIFIER", "NUMBER", 
                  "STRING", "NONE", "EQUALS", "ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
                  "PLUS", "MINUS", "TIMES", "DIVIDE", "LPAREN", "RPAREN", 
                  "LT", "GT", "LE", "GE", "NE", "COLON", "NEWLINE", "WS", 
                  "COMMENT", "MISMATCH" ]

    grammarFileName = "Grit.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


